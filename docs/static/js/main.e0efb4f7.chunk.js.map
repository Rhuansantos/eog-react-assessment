{"version":3,"sources":["Features/Weather/reducer.ts","Features/Weather/saga.ts","Features/Dashboard/reducer.ts","Features/Dashboard/saga.ts","store/sagas.js","store/reducers.ts","store/index.ts","components/Chip.tsx","Features/Weather/Weather.tsx","components/Header.tsx","components/Wrapper.tsx","components/Charts.tsx","components/CardCharts.tsx","Features/Dashboard/Metrics.tsx","App.tsx","index.js"],"names":["slice","createSlice","name","initialState","temperatureinCelsius","temperatureinFahrenheit","description","locationName","reducers","weatherDataRecevied","state","action","payload","weatherApiErrorReceived","reducer","actions","apiErrorReceived","watchApiError","call","toast","error","takeEvery","WeatherActions","type","metricSlice","multipleMeasurements","liveData","multipleMeasurementsDataRecevied","metricLiveDataRecevied","map","m","metric","value","at","moment","parseInt","format","unit","metricsApiErrorReceived","metricsLiveErrorReceived","MetricActions","root","spawn","weatherSaga","metricsSaga","weather","weatherReducer","metrics","MetricsReducer","combineReducers","withStyles","theme","background","palette","secondary","main","label","color","primary","Chip","client","createClient","url","getWeather","Weather","getLocation","useGeolocation","latLong","latitude","longitude","dispatch","useDispatch","useSelector","useQuery","query","variables","result","fetching","data","useEffect","message","getWeatherForLocation","LinearProgress","useStyles","makeStyles","grow","flexGrow","classes","AppBar","position","Toolbar","Typography","variant","className","wrapper","height","Wrapper","children","require","objGroupByTime","chartData","seen","width","minHeight","mergeObjectsInUnique","array","newArray","Map","forEach","item","propertyValue","has","set","get","Array","from","values","Charts","props","selectedChartOptions","key","i","length","j","measurements","push","filter","entry","hasOwnProperty","isArray","groupByKey","colors","margin","top","right","left","bottom","dataKey","tickCount","domain","scale","padding","strokeDasharray","c","stroke","dot","isAnimationActive","bullet","display","transform","title","fontSize","pos","marginBottom","SimpleCard","useState","setMetric","filterByMetric","find","info","newValue","undefined","Card","CardContent","component","animatedComponents","makeAnimated","currentTime","Date","valueOf","createStyles","select","spacing","queryMultipleMeasurements","getMetrics","Metrics","setSelectedChartsOptions","useSubscription","resultsLiveMetrics","resultMultipleMeasurements","getMultipleMeasurements","newMeasurement","Container","maxWidth","Grid","xs","onChange","selectedOption","closeMenuOnSelect","components","isMulti","options","tempOptions","Object","entries","replace","loadDropDown","container","CardCharts","store","composeEnhancers","composeWithDevTools","sagaMiddleware","createSagaMiddleware","middlewares","applyMiddleware","createStore","run","sagas","createMuiTheme","default","App","CssBaseline","Header","subscriptionClient","SubscriptionClient","reconnect","exchanges","defaultExchanges","subscriptionExchange","forwardSubscription","operation","request","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e0efb4f7.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from 'redux-starter-kit';\n\nexport type WeatherForLocation = {\n  description: string;\n  locationName: string;\n  temperatureinCelsius: number;\n};\n\nexport type ApiErrorAction = {\n  error: string;\n};\n\nconst initialState = {\n  temperatureinCelsius: 0,\n  temperatureinFahrenheit: 0,\n  description: '',\n  locationName: '',\n};\n\nconst toF = (c: number) => (c * 9) / 5 + 32;\n\nconst slice = createSlice({\n  name: 'weather',\n  initialState,\n  reducers: {\n    weatherDataRecevied: (state, action: PayloadAction<WeatherForLocation>) => {\n      const { description, locationName, temperatureinCelsius } = action.payload;\n      state.temperatureinCelsius = temperatureinCelsius;\n      state.temperatureinFahrenheit = toF(temperatureinCelsius);\n      state.description = description;\n      state.locationName = locationName;\n    },\n    weatherApiErrorReceived: (state, action: PayloadAction<ApiErrorAction>) => state,\n  },\n});\n\nexport const reducer = slice.reducer;\nexport const actions = slice.actions;\n","import { takeEvery, call } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport { actions as WeatherActions, ApiErrorAction } from './reducer';\nimport { PayloadAction } from 'redux-starter-kit';\n\nfunction* apiErrorReceived(action: PayloadAction<ApiErrorAction>) {\n  yield call(toast.error, `Error Received: ${action.payload.error}`);\n}\n\nexport default function* watchApiError() {\n  yield takeEvery(WeatherActions.weatherApiErrorReceived.type, apiErrorReceived);\n}\n","import { createSlice, PayloadAction } from 'redux-starter-kit';\nimport moment from 'moment';\n\nexport type MultipleMeasurementsTypes = {\n  multipleMeasurements: string;\n};\n\nexport type LiveMetricsTypes = {\n  liveData: Array<Object>;\n  metric: string;\n  value: string;\n  at: string;\n  unit: string;\n};\n\nexport type ApiErrorAction = {\n  error: string;\n};\n\nconst initialState = {\n  multipleMeasurements: {},\n  liveData: {},\n  // liveData: [{ metric: '', value: 0, at: 0, unit: ''}],\n};\n\nconst metricSlice = createSlice({\n  name: 'metrics',\n  initialState,\n  reducers: {\n    multipleMeasurementsDataRecevied: (state, action: PayloadAction<MultipleMeasurementsTypes>) => {\n      state.multipleMeasurements = action.payload;\n    },\n    metricLiveDataRecevied: (state, action: PayloadAction<LiveMetricsTypes>) => {\n      state.liveData = [action.payload]?.map(m => ({\n        [m.metric]: m.value,\n        at: moment(parseInt(m.at)).format('LTS'),\n        unit: m.unit,\n      }))[0];\n    },\n    metricsApiErrorReceived: (state, action: PayloadAction<ApiErrorAction>) => state,\n    metricsLiveErrorReceived: (state, action: PayloadAction<ApiErrorAction>) => state,\n  },\n});\n\nexport const reducer = metricSlice.reducer;\nexport const actions = metricSlice.actions;\n","import { takeEvery, call } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport { actions as MetricActions, ApiErrorAction } from './reducer';\nimport { PayloadAction } from 'redux-starter-kit';\n\nfunction* apiErrorReceived(action: PayloadAction<ApiErrorAction>) {\n  yield call(toast.error, `Error Received: ${action.payload.error}`);\n}\n\nexport default function* watchApiError() {\n  yield takeEvery(MetricActions.metricsApiErrorReceived.type, apiErrorReceived);\n}\n","import { spawn } from 'redux-saga/effects';\nimport weatherSaga from '../Features/Weather/saga';\nimport metricsSaga from '../Features/Dashboard/saga';\n\nexport default function* root() {\n  yield spawn(weatherSaga);\n  yield spawn(metricsSaga);\n}\n","import { reducer as weatherReducer } from '../Features/Weather/reducer';\nimport { reducer as MetricsReducer } from '../Features/Dashboard/reducer';\n\nexport default {\n  weather: weatherReducer,\n  metrics: MetricsReducer,\n};\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport { combineReducers } from 'redux-starter-kit';\nimport sagas from './sagas';\nimport reducers from './reducers';\n\nconst reducer = combineReducers(reducers);\nexport type IState = ReturnType<typeof reducer>;\n\nexport default () => {\n  const composeEnhancers = composeWithDevTools({});\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = applyMiddleware(sagaMiddleware);\n  const store = createStore(reducer, composeEnhancers(middlewares));\n\n  sagaMiddleware.run(sagas);\n\n  return store;\n};\n","import Chip from '@material-ui/core/Chip';\nimport { withStyles, Theme } from '@material-ui/core/styles';\n\nconst cardStyles = (theme: Theme) => ({\n  root: {\n    background: theme.palette.secondary.main,\n  },\n  label: {\n    color: theme.palette.primary.main,\n  },\n});\nexport default withStyles(cardStyles)(Chip);\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { actions } from './reducer';\nimport { Provider, createClient, useQuery } from 'urql';\nimport { useGeolocation } from 'react-use';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Chip from '../../components/Chip';\nimport { IState } from '../../store';\n\nconst client = createClient({\n  url: 'https://react.eogresources.com/graphql',\n});\n\nconst query = `\nquery($latLong: WeatherQuery!) {\n  getWeatherForLocation(latLong: $latLong) {\n    description\n    locationName\n    temperatureinCelsius\n  }\n}\n`;\n\nconst getWeather = (state: IState) => {\n  const { temperatureinFahrenheit, description, locationName } = state.weather;\n  return {\n    temperatureinFahrenheit,\n    description,\n    locationName,\n  };\n};\n\nexport default () => {\n  return (\n    <Provider value={client}>\n      <Weather />\n    </Provider>\n  );\n};\n\nconst Weather = () => {\n  const getLocation = useGeolocation();\n  // Default to houston\n  const latLong = {\n    latitude: getLocation.latitude || 29.7604,\n    longitude: getLocation.longitude || -95.3698,\n  };\n  const dispatch = useDispatch();\n  const { temperatureinFahrenheit, description, locationName } = useSelector(getWeather);\n\n  const [result] = useQuery({\n    query,\n    variables: {\n      latLong,\n    },\n  });\n  const { fetching, data, error } = result;\n  useEffect(() => {\n    if (error) {\n      dispatch(actions.weatherApiErrorReceived({ error: error.message }));\n      return;\n    }\n    if (!data) return;\n    const { getWeatherForLocation } = data;\n    dispatch(actions.weatherDataRecevied(getWeatherForLocation));\n  }, [dispatch, data, error]);\n\n  if (fetching) return <LinearProgress />;\n\n  return <Chip label={`Weather in ${locationName}: ${description} and ${temperatureinFahrenheit}°`} />;\n};\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Weather from '../Features/Weather/Weather';\n\nconst useStyles = makeStyles({\n  grow: {\n    flexGrow: 1,\n  },\n});\n\nexport default () => {\n  const classes = useStyles();\n\n  const name = \"santos's\";\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\n          {name} EOG React Visualization Assessment\n        </Typography>\n        <Weather />\n      </Toolbar>\n    </AppBar>\n  );\n};\n","import * as React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n  wrapper: {\n    height: '100vh',\n  },\n});\n\nconst Wrapper: React.FC = ({ children }) => {\n  const classes = useStyles();\n  return <div className={classes.wrapper}>{children}</div>;\n};\n\nexport default Wrapper;\n","import React, { Fragment, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Legend, ResponsiveContainer, Tooltip } from 'recharts';\nconst moment = require('moment');\ninterface Props {\n  data: any;\n  liveData: any;\n  selectedChartOptions: any;\n}\nlet objGroupByTime: Array<any> = [];\nlet chartData: Array<Object> = [];\nlet seen: any = {};\n\nconst useStyles = makeStyles({\n  wrapper: {\n    width: '100%',\n    height: '70vh',\n    minHeight: '300px',\n  },\n});\n\nfunction mergeObjectsInUnique<T>(array: T[]): T[] {\n  const newArray = new Map();\n  array.forEach((item: any) => {\n    const propertyValue = item['at'];\n    newArray.has(propertyValue)\n      ? newArray.set(propertyValue, { ...item, ...newArray.get(propertyValue) })\n      : newArray.set(propertyValue, item);\n  });\n  return Array.from(newArray.values());\n}\n\nfunction groupByKey(array: any, key: string): void {\n  // Merge all\n  for (let i = 0; i < array.length; i++) {\n    for (let j = 0; j < array[i].measurements.length; j++) {\n      objGroupByTime.push({\n        at: moment(array[i].measurements[j]['at']).format('LTS'),\n        [array[i].measurements[j]['metric']]: array[i].measurements[j]['value'],\n      });\n    }\n  }\n  // Group by time\n  objGroupByTime.filter(function(entry) {\n    let previous;\n    if (seen.hasOwnProperty(entry.at)) {\n      previous = seen[entry.at];\n      previous.data.push(entry);\n      return false;\n    }\n\n    if (!Array.isArray(entry)) {\n      entry.data = [entry.data];\n    }\n    seen[entry.at] = entry;\n    return true;\n  });\n\n  chartData = mergeObjectsInUnique(objGroupByTime);\n}\n\nconst Charts: React.FC<Props> = props => {\n  const classes = useStyles();\n  const { data, liveData, selectedChartOptions } = props;\n  useEffect(() => {\n    groupByKey(data, 'at');\n  }, [data]);\n\n  useEffect(() => {\n    chartData.push(liveData);\n    const insertLiveData = chartData;\n    chartData = mergeObjectsInUnique(insertLiveData);\n  }, [liveData]);\n  const colors = ['#16302B', '#694873', '#8B728E', '#85B79D', '#C0E5C8', '#5E5D5C', '#453643', '#28112B'];\n  return (\n    <Fragment>\n      <div className={classes.wrapper}>\n        <ResponsiveContainer>\n          <LineChart data={chartData} margin={{ top: 70, right: 70, left: 70, bottom: 70 }}>\n            <XAxis dataKey=\"at\" tickCount={30} />\n            <YAxis\n              type=\"number\"\n              domain={['auto', 'auto']}\n              tickCount={30}\n              scale=\"linear\"\n              padding={{ top: 10, bottom: 10 }}\n            />\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <Legend />\n            <Tooltip />\n\n            {selectedChartOptions?.map((c: { value: string }, i: number) => {\n              return (\n                <Line\n                  type=\"monotone\"\n                  key={c.value}\n                  dataKey={c.value}\n                  stroke={colors[i]}\n                  dot={false}\n                  isAnimationActive={false}\n                />\n              );\n            })}\n          </LineChart>\n        </ResponsiveContainer>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default Charts;\n","import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nconst SimpleCard = (props: any) => {\n  const classes = useStyles();\n  const [metric, setMetric] = useState({ metric: '', unit: '', value: '' });\n  const filterByMetric = [props.liveData].find((m: any) => m.metric === props.info.value);\n  const newValue = filterByMetric !== undefined ? filterByMetric : metric;\n\n  useEffect(() => {\n    if (newValue !== undefined) {\n      setMetric(newValue);\n    }\n  }, [newValue]);\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <Typography variant=\"h5\" component=\"h2\">\n          {props.info.label}\n        </Typography>\n        <Typography className={classes.pos} color=\"textSecondary\">\n          {`${metric.value} - ${metric.unit}`}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default SimpleCard;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { actions } from './reducer';\nimport { IState } from '../../store';\nimport { LinearProgress, Grid, Container } from '@material-ui/core/';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport Select from 'react-select';\nimport { useQuery, useSubscription } from 'urql';\nimport makeAnimated from 'react-select/animated';\nimport Charts from '../../components/Charts';\nimport CardCharts from '../../components/CardCharts';\n\nconst animatedComponents = makeAnimated();\n\nconst currentTime = new Date().valueOf();\nconst passTime = 1800000;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    select: {\n      padding: theme.spacing(2),\n    },\n  }),\n);\n\nconst queryMultipleMeasurements = `\nquery($input: [MeasurementQuery] = [\n  {metricName: \"tubingPressure\", after: ${currentTime - passTime}, before: ${currentTime}},\n  {metricName: \"casingPressure\", after: ${currentTime - passTime}, before: ${currentTime}},\n  {metricName: \"oilTemp\", after: ${currentTime - passTime}, before: ${currentTime}},\n  {metricName: \"flareTemp\", after: ${currentTime - passTime}, before: ${currentTime}},\n  {metricName: \"waterTemp\", after: ${currentTime - passTime}, before: ${currentTime}},\n  {metricName: \"injValveOpen\", after: ${currentTime - passTime}, before: ${currentTime}}\n]\n){\n  getMultipleMeasurements(input: $input) {\n    metric\n    measurements {\n     at\n     value\n     metric\n     unit\n    }\n  }\n}`;\n\nconst queryMetricSubscription = `\n  subscription {\n    newMeasurement{\n      metric\n      at\n      value\n      unit\n    }\n  }\n`;\nexport interface MultipleMeasurements {\n  measurements: Object;\n}\n\nconst getMetrics = (state: IState) => {\n  const { multipleMeasurements, liveData } = state.metrics;\n  return {\n    multipleMeasurements,\n    liveData,\n  };\n};\n\nconst Metrics = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const [selectedChartOptions, setSelectedChartsOptions] = useState([]);\n  const { multipleMeasurements, liveData } = useSelector(getMetrics);\n  const [resultsLiveMetrics] = useSubscription({\n    query: queryMetricSubscription,\n  });\n  let [resultMultipleMeasurements] = useQuery({\n    query: queryMultipleMeasurements,\n  });\n\n  const loadDropDown = (): Array<Object> => {\n    const tempOptions: any = [];\n    Object.entries(multipleMeasurements).forEach((m: any) => {\n      tempOptions.push({ value: m[1].metric, label: m[1].metric.replace(/([A-Z])/g, ' $1') });\n    });\n    return tempOptions;\n  };\n\n  const handleChange = (selectedOption: any) => {\n    setSelectedChartsOptions(selectedOption);\n  };\n\n  // Effect for Multiple and Pass Metrics\n  useEffect(() => {\n    const { data, error } = resultMultipleMeasurements;\n    if (error) {\n      dispatch(actions.metricsApiErrorReceived({ error: error?.message }));\n      return;\n    }\n    if (!data) return;\n    dispatch(actions.multipleMeasurementsDataRecevied(data?.getMultipleMeasurements));\n  }, [dispatch, resultMultipleMeasurements]);\n\n  // Effect for Live Data\n  useEffect(() => {\n    const { data, error } = resultsLiveMetrics;\n    if (error) {\n      dispatch(actions.metricsLiveErrorReceived({ error: error?.message }));\n      return;\n    }\n    if (!data) return;\n    dispatch(actions.metricLiveDataRecevied(data?.newMeasurement));\n  }, [dispatch, resultsLiveMetrics]);\n\n  if (resultMultipleMeasurements?.fetching) return <LinearProgress />;\n  return (\n    <>\n      <Container maxWidth=\"lg\">\n        <Grid item xs={10} className={classes.select}>\n          <Select\n            onChange={handleChange}\n            closeMenuOnSelect\n            components={animatedComponents}\n            isMulti\n            options={loadDropDown()}\n          />\n        </Grid>\n      </Container>\n      <Grid container spacing={1} className={classes.select}>\n        {selectedChartOptions?.map((c, i) => {\n          return (\n            <Grid key={i} item xs={2}>\n              <CardCharts info={c} liveData={resultsLiveMetrics.data.newMeasurement} />\n            </Grid>\n          );\n        })}\n      </Grid>\n      <Grid container spacing={1} className={classes.select}></Grid>\n      <Charts data={multipleMeasurements} liveData={liveData} selectedChartOptions={selectedChartOptions} />\n    </>\n  );\n};\n\nexport default Metrics;\n","import React from 'react';\nimport createStore from './store';\nimport { Provider } from 'react-redux';\nimport { ToastContainer } from 'react-toastify';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Header from './components/Header';\nimport Wrapper from './components/Wrapper';\n// import NowWhat from './components/NowWhat';\nimport Metrics from './Features/Dashboard/Metrics';\n\nconst store = createStore();\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: 'rgb(39,49,66)',\n    },\n    secondary: {\n      main: 'rgb(197,208,222)',\n    },\n    background: {\n      default: 'rgb(226,231,238)',\n    },\n  },\n});\n\nconst App = () => (\n  <MuiThemeProvider theme={theme}>\n    <CssBaseline />\n    <Provider store={store}>\n      <Wrapper>\n        <Header />\n        {/* <NowWhat /> */}\n        <Metrics />\n        <ToastContainer />\n      </Wrapper>\n    </Provider>\n  </MuiThemeProvider>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider, createClient, defaultExchanges, subscriptionExchange } from 'urql';\nimport { SubscriptionClient } from 'subscriptions-transport-ws';\n\nconst subscriptionClient = new SubscriptionClient('wss://react.eogresources.com/graphql', {\n  reconnect: true,\n});\n\nconst client = createClient({\n  url: 'https://react.eogresources.com/graphql',\n  exchanges: [\n    ...defaultExchanges,\n    subscriptionExchange({\n      forwardSubscription: operation => subscriptionClient.request(operation),\n    }),\n  ],\n});\n\nReactDOM.render(\n  <Provider value={client}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}